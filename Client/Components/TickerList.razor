@inject NavigationManager _navigation

@if (Tickers == null)
{

}
else
{
    <div class="form-group">
        <input class="form-control" type="text" placeholder="Filter..."
               @bind="_filter"
               @bind:event="oninput">
    </div>
    <table class="table">
        <thead>
        </thead>
        <tbody>
            @foreach (var ticker in Tickers.Reverse())
            {
                if (!IsVisible(ticker))
                    continue;

                <tr>
                    <td>@ticker.Name</td>
                    <td>
                        <button class="btn btn-info" @onclick="() => GoToTickerDaily(ticker.Name, false)">
                            Daily
                        </button>
                    </td>
                    <td>
                        <button class="btn btn-info" @onclick="() => GoToTickerDaily(ticker.Name, true)">
                            Daily Adjusted
                        </button>
                    </td>
                    <td>
                        <button class="btn btn-info" @onclick="() => GoToTickerWeekly(ticker.Name, false)">
                            Weekly
                        </button>
                    </td>
                    <td>
                        <button class="btn btn-info" @onclick="() => GoToTickerWeekly(ticker.Name, true)">
                            Weekly Adjusted
                        </button>
                    </td>
                    <td>
                        <button class="btn btn-info" @onclick="() => GoToTickerMonthly(ticker.Name, false)">
                            Monthly
                        </button>
                    </td>
                    <td>
                        <button class="btn btn-info" @onclick="() => GoToTickerMonthly(ticker.Name, true)">
                            Monthly Adjusted
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    [ParameterAttribute]
    public Stocks.Shared.Models.Ticker[] Tickers { get; set; }
    private string _filter;

    private void GoToTickerDaily(string ticker, bool adjusted)
    {
        GoToTicker(ticker, "daily", adjusted);
    }

    private void GoToTickerWeekly(string ticker, bool adjusted)
    {
        GoToTicker(ticker, "weekly", adjusted);
    }

    private void GoToTickerMonthly(string ticker, bool adjusted)
    {
        GoToTicker(ticker, "monthly", adjusted);
    }

    private void GoToTicker(string ticker, string series, bool adjusted)
    {
        if (adjusted)
        {
            _navigation.NavigateTo($"ticker/{ticker}/{series}/adjusted", true);
        }
        else
        {
            _navigation.NavigateTo($"ticker/{ticker}/{series}", true);
        }
    }

    private bool IsVisible(Stocks.Shared.Models.Ticker ticker)
    {
        if (string.IsNullOrEmpty(_filter))
            return true;

        if (ticker.Name.Contains(_filter, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}
