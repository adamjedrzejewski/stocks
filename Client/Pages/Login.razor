@using Stocks.Shared.Models
@page "/login"
@inject HttpClient httpClient
@inject NavigationManager navigation
@inject ILoginViewModel loginViewModel
@inject IRegisterViewModel registerViewModel

<h3>Login</h3>
<hr />

<form @onsubmit="LoginUser">
    <div class="col-6">
        <input id="login-username" type="text" class="form-control" placeholder="username" @bind="loginViewModel.Username" />
    </div>
    <br />
    <div class="col-6">
        <input id="login-password" type="password" class="form-control" placeholder="password" @bind="loginViewModel.Password" />
    </div>
    <br />
    <div class="col-6">
        <button id="login-submit" class="btn btn-primary">Login</button>
    </div>
</form>

<br />
<br />
<h3>Register</h3>
<hr />
@if (!_valid_registration)
{
    <span>Invalid username</span>
}
@if (_show_register_success)
{
    <span>Registered</span>
}
<form @onsubmit="RegisterUser">
    <div class="col-6">
        <input id="register-username" type="text" class="form-control" placeholder="username" @bind="registerViewModel.Username" />
    </div>
    <br />
    <div class="col-6">
        <input id="register-password" type="password" class="form-control" placeholder="password" @bind="registerViewModel.Password" />
    </div>
    <br />
    <div class="col-6">
        <button id="register-submit" class="btn btn-primary">Register</button>
    </div>
</form>


@code {
    private bool _valid_registration = true;
    private bool _show_register_success = false;

    private async Task LoginUser()
    {
        if (loginViewModel.Username == null || loginViewModel.Password == null)
        {
            return;
        }

        await loginViewModel.LoginUserAsync();
        navigation.NavigateTo("/", true);
    }

    private async Task RegisterUser()
    {
        if (registerViewModel.Username == null || registerViewModel.Password == null)
        {
            return;
        }


        _valid_registration = await registerViewModel.RegisterUserAsync();
        _show_register_success = _valid_registration;
    }
}
